import argparse

import matplotlib.pyplot as plt
import networkx as nx
import numpy as np

parser = argparse.ArgumentParser()
parser.add_argument('-n', '--network', help='Path to the network generated by the _create_network_graph script',
                    type=str, required=True)
parser.add_argument('-l', '--layout', help='Use specific layout [spring, planar, spectral, ring, force atlas 2] Default: force atlas 2', type=str)

args = parser.parse_args()


def map_degree(deg):
    if deg > 1:
        # switch
        return 'yellow'
    else:
        return 'orange'


graph: nx.Graph = nx.readwrite.read_edgelist(args.network, comments='#')

degrees = graph.degree()  # Dict with Node ID, Degree
nodes = graph.nodes()
n_color = np.asarray([map_degree(degrees[n]) for n in nodes])

if args.layout == 'planar':
    nx.draw_planar(graph, node_color=n_color, with_labels=True)
elif args.layout == 'spring':
    nx.draw_spring(graph, node_color=n_color, with_labels=True)
elif args.layout == 'spectral':
    nx.draw_spectral(graph, node_color=n_color, with_labels=True)
elif args.layout == 'ring':
    nx.draw_circular(graph, node_color=n_color, with_labels=True)
else:
    nx.draw(graph, node_color=n_color, with_labels=True)
plt.draw()
plt.show()
